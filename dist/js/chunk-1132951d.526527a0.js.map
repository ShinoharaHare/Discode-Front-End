{"version":3,"sources":["webpack:///./node_modules/just-kebab-case/index.js","webpack:///./node_modules/regex-emoji/lib/index.js","webpack:///./node_modules/embed-plugin-emoji/src/index.js"],"names":["module","exports","kebabCase","wordSeparators","capitals","str","replace","match","toLowerCase","trim","split","join","id","emoji","opts","defaultOptions","regex","emojiName","pluginOptions","options","Promise","resolve","result","_services","push","template"],"mappings":"iGAAAA,EAAOC,QAAUC,EAejB,IAAIC,EAAiB,uEACjBC,EAAW,mCAEf,SAASF,EAAUG,GAKjB,OAHAA,EAAMA,EAAIC,QAAQF,GAAU,SAASG,GACnC,MAAO,KAAOA,EAAMC,eAAiBD,MAEhCF,EACJI,OACAC,MAAMP,GACNQ,KAAK,O,kCChBVX,EAAOC,QAAU,WACf,MAAO,wB,kCCXT,kHAIA,MAAMW,EAAK,QAII,SAASC,EAAMC,GAC5B,MAAMC,EAAiB,CACrBH,KACAI,MAAO,MACP,SAASC,GACP,MAAO,sBAAsB,IAAMA,gBAIjCC,EAAgB,IAAO,GAAIH,EAAgBD,GACjD,MAAO,CACL,UAAUK,GACR,OAAOC,QAAQC,QACb,IAAO,GAAIF,EAAS,CAClBG,OAAQH,EAAQG,OAAOhB,QACrBY,EAAcF,MACd,CAACT,EAAOU,KAEN,OADAE,EAAQI,UAAUC,KAAK,CAAEZ,KAAIL,UACtBW,EAAcO,SAASR,EAAWE,EAASD,UAShEL,EAAMD,GAAKA","file":"js/chunk-1132951d.526527a0.js","sourcesContent":["module.exports = kebabCase;\n\n/*\n  kebabCase('the quick brown fox'); // 'the-quick-brown-fox'\n  kebabCase('the-quick-brown-fox'); // 'the-quick-brown-fox'\n  kebabCase('the_quick_brown_fox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrownFox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrown Fox'); // 'the-quick-brown-fox'\n  kebabCase('thequickbrownfox'); // 'thequickbrownfox'\n  kebabCase('the - quick * brown# fox'); // 'the-quick-brown-fox'\n  kebabCase('theQUICKBrownFox'); // 'the-q-u-i-c-k-brown-fox'\n*/\n\n// any combination of spaces and punctuation characters\n// thanks to http://stackoverflow.com/a/25575009\nvar wordSeparators = /[\\s\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~]+/;\nvar capitals = /[A-Z\\u00C0-\\u00D6\\u00D9-\\u00DD]/g;\n\nfunction kebabCase(str) {\n  //replace capitals with space + lower case equivalent for later parsing\n  str = str.replace(capitals, function(match) {\n    return ' ' + (match.toLowerCase() || match);\n  });\n  return str\n    .trim()\n    .split(wordSeparators)\n    .join('-');\n}\n","\"use strict\";\n\n/**\n * emojiRegex\n * Returns the emoji regex value.\n *\n * @name emojiRegex\n * @function\n * @return {RegExp} The emoji regex.\n */\nmodule.exports = function emojiRegex() {\n  return (/:([a-z0-9_\\+\\-]+):/g\n  );\n};","import extend from \"just-extend\"\nimport emojiRegex from \"regex-emoji\"\nimport kebab from \"just-kebab-case\"\n\nconst id = \"emoji\"\n\n// You need emoji.css to run with this plugin. Else you need to pass the\n// template suitable to your needs.\nexport default function emoji(opts) {\n  const defaultOptions = {\n    id,\n    regex: emojiRegex(),\n    template(emojiName) {\n      return `<span class=\"ec ec-${kebab(emojiName)}\"></span>`\n    }\n  }\n\n  const pluginOptions = extend({}, defaultOptions, opts)\n  return {\n    transform(options) {\n      return Promise.resolve(\n        extend({}, options, {\n          result: options.result.replace(\n            pluginOptions.regex,\n            (match, emojiName) => {\n              options._services.push({ id, match })\n              return pluginOptions.template(emojiName, options, pluginOptions)\n            }\n          )\n        })\n      )\n    }\n  }\n}\n\nemoji.id = id\n"],"sourceRoot":""}